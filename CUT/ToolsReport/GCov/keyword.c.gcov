        -:    0:Source:src/keyword.c
        -:    0:Graph:keyword.gcno
        -:    0:Data:keyword.gcda
        -:    0:Runs:1
        -:    0:Source is newer than graph
        -:    1:#include <pthread.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:
        -:    6:#include "../header/header.h"
        -:    7:
        -:    8:// Function to validate the input file
        -:    9:int validation(char *tempfile) {
        -:   10:    FILE *fptr = fopen((char *)tempfile, "r");
        2:   11:    if (fptr == NULL) {
        2:   12:        printf("File Error");
        2:   13:        exit(0);
    #####:   14:    }
    #####:   15:
        -:   16:    int proID, proT, keyw;
        -:   17:    proID = proT = keyw = 0;
        -:   18:
        2:   19:    char str[SIZE], *token;
        -:   20:    while (fgets(str, SIZE, fptr)) {
        -:   21:        token = strtok(str, "-");
       27:   22:
       25:   23:        if (strcmp(token, project_id_str) == 0)
        -:   24:            proID += 1;
       25:   25:        else if (strcmp(token, project_title_str) == 0)
        1:   26:            proT += 1;
       24:   27:        else if (strcmp(token, keyword_str) == 0)
        1:   28:            keyw += 1;
       23:   29:    }
        8:   30:
        -:   31:    (void)fclose(fptr);
        -:   32:
        2:   33:    if (proID == 1 && proT == 1 && keyw >= 1)
        -:   34:        return 1;
        2:   35:
        1:   36:    return 0;
        -:   37:}
        1:   38:
        -:   39:// Extract the project details from the given text files
        -:   40:void *extract_project_details(void *tempfile) {
        -:   41:    FILE *fptr = fopen((char *)tempfile, "r");
        3:   42:
        3:   43:    // Check for file error
        -:   44:    if (fptr == NULL) {
        -:   45:        printf("\nError! file not found: %s\n", (char *)tempfile);
        3:   46:        return NULL;
        1:   47:    }
        1:   48:    // Check for Valid text file according to guides lines
        -:   49:    else if (validation((char *)tempfile) == 0) {
        -:   50:        printf("\nError! File invalid <%s>\n", (char *)tempfile);
        2:   51:        FILE *inv = fopen("data/invalid.txt", "a+");
        1:   52:        if (inv == NULL) {
        1:   53:            printf("File Error");
        1:   54:            exit(0);
    #####:   55:        }
    #####:   56:        fprintf(inv, "%s\n", (char *)tempfile);
        -:   57:        (void)fclose(inv);
        1:   58:
        1:   59:    }
        -:   60:    // Extract details if file valid
        -:   61:    else {
        -:   62:        printf("\nExtracting.. %s", (char *)tempfile);
        -:   63:
        1:   64:        sp *new_pro_node = (sp *)calloc(1, sizeof(sp));
        -:   65:        if (new_pro_node == NULL) {
        1:   66:            printf("Memory Error");
        1:   67:            exit(0);
    #####:   68:        }
    #####:   69:
        -:   70:        char str[SIZE], *token, keySearch[SIZE];
        -:   71:        while (fgets(str, SIZE, fptr)) {
        -:   72:            token = strtok(str, "-");
       14:   73:            while (token != NULL) {
       13:   74:                if (strcmp(token, project_id_str) == 0) {
       31:   75:                    token = strtok(NULL, "\n");
       18:   76:                    if (token != NULL) {
        1:   77:                        token[strlen(token) - 1] = '\0';
        1:   78:                        strcpy(new_pro_node->projectId, token);
        1:   79:                    }
        -:   80:                }
        -:   81:
       17:   82:                else if (strcmp(token, project_title_str) == 0) {
        1:   83:                    token = strtok(NULL, "\n");
        1:   84:                    if (token != NULL) {
        1:   85:                        token[strlen(token) - 1] = '\0';
        -:   86:                        strcpy(new_pro_node->projectTitle, token);
        -:   87:                    }
       16:   88:                }
        4:   89:
        4:   90:                else if (strcmp(token, keyword_str) == 0) {
        4:   91:                    token = strtok(NULL, "\n");
        -:   92:                    if (token != NULL) {
        -:   93:                        strcpy(keySearch, token);
       18:   94:                        keywordSearch(new_pro_node, keySearch, &keywordll);
        -:   95:                    }
        -:   96:                }
        1:   97:
        -:   98:                token = strtok(NULL, "-");
        -:   99:            }
        2:  100:        }
        2:  101:        free(new_pro_node);
        -:  102:    }
        -:  103:
        4:  104:    (void)fclose(fptr);
        4:  105:    return NULL;
        4:  106:}
    #####:  107:
    #####:  108:// Create newnode if keyword not already present
        -:  109:skw *createNode(sp *p1, char token[]) {
        4:  110:    skw *newNode = (skw *)calloc(1, sizeof(skw));
        4:  111:    if (newNode == NULL) {
        4:  112:        printf("Memory Error");
        4:  113:        exit(0);
        -:  114:    }
        -:  115:    strcpy(newNode->key, token);
        4:  116:    strcpy(newNode->projectIds[newNode->index], p1->projectId);
    #####:  117:    strcpy(newNode->projectTitle[newNode->index], p1->projectTitle);
    #####:  118:    newNode->index += 1;
    #####:  119:
        -:  120:    //  Initialize Mutex
        4:  121:    if (pthread_mutex_init(&(newNode->lock), NULL) != 0) {
        -:  122:        printf("\nError! Mutex init has failed\n");
        -:  123:        cleanFunc();
    #####:  124:        exit(0);
        -:  125:    }
        -:  126:    return newNode;
    #####:  127:}
        -:  128:
    #####:  129:// Update node if keyword is found
    #####:  130:void updateNode(sp *p1, skw *temp) {
    #####:  131:
        -:  132:    // lock mutex
        -:  133:    (void)pthread_mutex_lock(&(temp->lock));
    #####:  134:
    #####:  135:    strcpy(temp->projectIds[temp->index], p1->projectId);
        -:  136:    strcpy(temp->projectTitle[temp->index], p1->projectTitle);
        -:  137:    temp->index += 1;
        4:  138:
        4:  139:    // unlock Mutex
        -:  140:    (void)pthread_mutex_unlock(&(temp->lock));
        -:  141:}
        4:  142:
        1:  143:/*
        1:  144:Search for keyword and update
        -:  145:If not already present create new
        3:  146:*/
        9:  147:void keywordSearch(sp *p1, char *token, skw **keywordll) {
        6:  148:    token[strlen(token) - 1] = '\0';
    #####:  149:
    #####:  150:    // check if the linked list is empty
        -:  151:    if ((*keywordll) == NULL) {
        6:  152:        skw *newNode = (skw *)createNode(p1, token);
        6:  153:        (*keywordll) = newNode;
        -:  154:    } else {
        3:  155:        skw *temp = *keywordll, *last;
        -:  156:        while (temp != NULL) {
        -:  157:            if (strcmp(temp->key, token) == 0) {
        -:  158:                updateNode(p1, temp);
        -:  159:                return;
        -:  160:            }
        1:  161:            last = temp;
        -:  162:            temp = temp->next;
        5:  163:        }
        4:  164:        last->next = createNode(p1, token);
        4:  165:    }
        4:  166:}
        4:  167:
        -:  168:// Function to free the memory at the end of program
        1:  169:void cleanFunc() {
        -:  170:    skw *temp1;
        -:  171:    while (keywordll != NULL) {
        -:  172:        temp1 = keywordll;
        -:  173:        keywordll = keywordll->next;
        -:  174:        (void)pthread_mutex_destroy(&(temp1->lock));
        -:  175:        free(temp1);
        -:  176:    }
        -:  177:}
